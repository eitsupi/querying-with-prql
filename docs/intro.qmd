---
title: Introduction
jupyter: python3
sidebar_position: 1
slug: /
---

## Motivation

I wanted to compare PRQL and the latest DuckDB SQL
(and other query libraries) to clarify the missing features of PRQL
and to highlight the latest features of DuckDB.

* [PRQL](https://prql-lang.org/) is a modern language for data manipulation
that compiles to SQL.
Although the PRQL language is still evolving,
it is easy to create complex SQL queries. 
* [DuckDB](https://duckdb.org/) is a modern in-memory
([very fast](https://duckdblabs.github.io/db-benchmark/)) SQL OLAP
database management system.
DuckDB is also evolving, with new features and improving syntax.

This project uses CLI, JavaScript, Python, R, etc.
to combine the PRQL compiler and DuckDB database.
This gives a powerful database that can be queried with a simple syntax.

## Content and Credit

The content of each data manipulation is based on
the awesome [Modern Polars](https://kevinheavey.github.io/modern-polars/) book
by [Kevin Heavey](https://github.com/kevinheavey).
And furthermore its origin is [Modern Pandas](https://tomaugspurger.github.io/posts/modern-1-intro/)
by [Tom Augsburger](https://github.com/TomAugspurger).

Each query is side-by-side with that of the original
[Python Polars](https://pola-rs.github.io/polars/py-polars/html/reference/) one
and the equivalent operations in PRQL, DuckDB SQL, and [dplyr](https://dplyr.tidyverse.org/) (R).

Since this document focuses on the differences between the grammars of the different languages
and does not go into detail about the processing details,
I suggest that you also check out the original excellent artcles and book.

:::{.content-hidden}

Since Quarto cannot mix knitr and jupyter engines in a single qmd file (also if using include shortcode),
the knitr document wll output to a separate md file and imported here using the Docusaurus mdx functionality.

:::


```{=mdx}
import VesionInfo from './_info.md';

<VesionInfo/>
```

## Running the Code on IPython

As mentioned above, PRQL and DuckDB can run on a variety of languages.
This section describes, as an example, the use of IPython for easy interactive execution of PRQL, SQL, and Polars.

### Setup

This command installs the necessary Python packages.

```{.bash filename="Terminal"}
python -m pip install pyprql polars[pyarrow]
```

Then, we can start `ipython`.

Run `load_ext` magic to activate PRQL magic (from [pyprql](https://pyprql.readthedocs.io/))
and SQL magic (from [jupysql](https://jupysql.ploomber.io/)).

```{python}
#| output: false
%load_ext pyprql.magic
%load_ext sql
```

```{python}
#| include: false
%config SqlMagic.displaycon = False
%config SqlMagic.feedback = False
```

Use SQL magic connects to DuckDB in-memory database.
Note that PRQL magic shares the connection with SQL magic.

```{python}
%sql duckdb://
```

To fix the SQL dialect used inside PRQL magic, we need to set the target with config magic.
By setting `"sql.duckdb"` here, we can specify to the PRQL compiler that it should generate optimized SQL for DuckDB.

```{python}
%config PrqlMagic.target = "sql.duckdb"
```

All available targets can be found in the `prql_python.get_targets` function.

```{python}
import prql_python as prql

print(prql.get_targets())
```

### Combine DuckDB and Polars

By setting `autopolars` config, the results of PRQL and SQL executions can be converted to polars.DataFrame.

```{python}
#| output: false
%config PrqlMagic.autopolars = True
%config SqlMagic.autopolars = True
```

Also, since DuckDB can execute queries against polars.DataFrame and polars.LazyFrame etc.,
these can be referenced directly from PRQL or SQL, as shown below.

```{python}
import polars as pl

lf = pl.LazyFrame({"a": list(range(1, 6))})
```

:::{.panel-tabset}

#### PRQL DuckDB

```{python}
%%prql
from lf
derive b = a * 5
take 3
```

#### SQL DuckDB

```{python}
%%sql
SELECT
  a,
  a * 5 AS b
FROM lf
LIMIT 3
```

#### Python Polars

```{python}
lf.with_columns(b=pl.col("a") * 5).head(3).collect()
```

:::

## License

This website's content is licensed under the MIT license.
