## Preparing Data

{{< include _setup-knitr.qmd >}}

### Download

Download the data to be analysis (zipped CSV file) and write the data to a Parquet file.

This document uses R here, but we can do it in another language, or, manually download and unzip and
create the Parquet file (with DuckDB CLI).

:::{.panel-tabset}

#### R

```{r}
#| filename: R
#| cache: false
#| code-fold: true
#| warning: false
# Create "data" directory, download the zip file into the directory, and create a Parquet file.
data_dir <- "data"
dest <- file.path(data_dir, "flights.csv.zip")
csv_name <- "On_Time_Reporting_Carrier_On_Time_Performance_(1987_present)_2022_1.csv"
csv_path <- file.path(data_dir, csv_name)
parquet_path <- file.path(data_dir, "flights.parquet")

if (!fs::file_exists(parquet_path)) {
  if (!fs::file_exists(dest)) {
    fs::dir_create(data_dir)
    curl::curl_download(
      "https://transtats.bts.gov/PREZIP/On_Time_Reporting_Carrier_On_Time_Performance_1987_present_2022_1.zip",
      dest,
      handle = curl::new_handle(ssl_verifypeer = FALSE)
    )
  }

  unzip(dest, csv_name, exdir = data_dir)
  duckdb:::sql(glue::glue("COPY (FROM read_csv_auto('{csv_path}')) TO '{parquet_path}' (FORMAT PARQUET)"))
}
```

#### Shell

This is a sample command to download the zipped CSV file and covert it to a Parquet file.

:::{.callout-tip}

On Windows, the `unzip` command is not available by default, so use something like
`Expand-Archive -Path data/flights.csv.zip -DestinationPath data` in PowerShell insead.

:::

```{.bash filename=Terminal}
mkdir data
curl -sL https://transtats.bts.gov/PREZIP/On_Time_Reporting_Carrier_On_Time_Performance_1987_present_2022_1.zip -o data/flights.csv.zip
unzip -d data data/flights.csv.zip
duckdb -c "COPY (FROM read_csv_auto('data/On_Time_Reporting_Carrier_On_Time_Performance_(1987_present)_2022_1.csv')) TO 'data/flights.parquet' (FORMAT PARQUET)"
```

:::

### Load the Data

After the Parquet file is ready,
load it into DuckDB (in-memory) database table, R DataFrame, and Python polars.LazyFrame.

:::{.panel-tabset}

#### DuckDB

```{r}
#| filename: R
#| cache: false
#| include: false
con <- DBI::dbConnect(duckdb::duckdb(), ":memory:")
```

```{glue_sql}
#| filename: SQL
#| cache: false
#| warning: false
CREATE TABLE tab AS SELECT * FROM 'data/flights.parquet'
```

```{glue_sql}
#| filename: SQL
FROM tab LIMIT 5
```

#### R DataFrame

```{r}
#| filename: R
#| cache: false
#| output: false
library(dplyr, warn.conflicts = FALSE)

df <- duckdb:::sql("FROM 'data/flights.parquet'")
```

```{r}
#| filename: R
df |> head(5)
```

#### Python polars.LazyFrame

```{python}
#| filename: Python
#| cache: false
#| output: false
import polars as pl

lf = pl.scan_parquet("data/flights.parquet")
```

```{python}
#| filename: Python
lf.fetch(5)
```

:::
