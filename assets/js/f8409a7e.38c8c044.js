"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[206],{7266:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>d,default:()=>g,frontMatter:()=>c,metadata:()=>h,quartoRawHtml:()=>p,toc:()=>m});var r=t(5893),s=t(1151),a=t(4866),i=t(5162);function l(e){const n={admonition:"admonition",li:"li",p:"p",ul:"ul",...(0,s.a)(),...e.components};return(0,r.jsxs)(n.admonition,{type:"important",children:[(0,r.jsx)(n.p,{children:"The versions we are currently using are as follows:"}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"PRQL: 0.11.1"}),"\n",(0,r.jsx)(n.li,{children:"DuckDB: v0.9.2"}),"\n"]})]})}function o(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}const c={title:"Introduction",jupyter:"python3",sidebar_position:1,slug:"/"},d=void 0,h={id:"intro",title:"Introduction",description:"This document is an attempt to do some typical table data manipulation using PRQL and DuckDB.",source:"@site/docs/intro.mdx",sourceDirName:".",slug:"/",permalink:"/querying-with-prql/",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{title:"Introduction",jupyter:"python3",sidebar_position:1,slug:"/"},sidebar:"tutorialSidebar",next:{title:"Selecting and Filtering",permalink:"/querying-with-prql/indexing"}},u={},p=["<div><style>\n.dataframe > thead > tr,\n.dataframe > tbody > tr {\n  text-align: right;\n  white-space: pre-wrap;\n}\n</style>\n<small>shape: (3, 2)</small>","</div>","<div><style>\n.dataframe > thead > tr,\n.dataframe > tbody > tr {\n  text-align: right;\n  white-space: pre-wrap;\n}\n</style>\n<small>shape: (3, 2)</small>","</div>","<div><style>\n.dataframe > thead > tr,\n.dataframe > tbody > tr {\n  text-align: right;\n  white-space: pre-wrap;\n}\n</style>\n<small>shape: (3, 2)</small>","</div>"],m=[{value:"Motivation",id:"motivation",level:2},{value:"Content and Credit",id:"content-and-credit",level:2},{value:"Running the Code on IPython",id:"running-the-code-on-ipython",level:2},{value:"Setup",id:"setup",level:3},{value:"Combine DuckDB and Polars",id:"combine-duckdb-and-polars",level:3},{value:"License",id:"license",level:2}];function x(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,s.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.p,{children:["This document is an attempt to do some typical table data manipulation using ",(0,r.jsx)(n.a,{href:"https://prql-lang.org/",children:"PRQL"})," and ",(0,r.jsx)(n.a,{href:"https://duckdb.org/",children:"DuckDB"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["PRQL is a in development modern language for data manipulation, and can be compiled to SQL. DuckDB is a modern in-memory SQL OLAP (",(0,r.jsx)(n.a,{href:"https://duckdblabs.github.io/db-benchmark/",children:"very fast"}),") database management system."]}),"\n",(0,r.jsx)(n.h2,{id:"motivation",children:"Motivation"}),"\n",(0,r.jsx)(n.p,{children:"CLI, JavaScript, Python, R, etc., we can combine PRQL compiler and DuckDB in various places to manipulate data with PRQL."}),"\n",(0,r.jsx)(n.p,{children:"At the same time, new features are being added to DuckDB\u2019s SQL on a constant basis, and the syntax is becoming more friendly."}),"\n",(0,r.jsx)(n.p,{children:"So, I thought that by comparing PRQL and the latest DuckDB SQL (and other query libraries), we could clarify the missing features of the PRQL and highlight the latest features of DuckDB."}),"\n",(0,r.jsx)(n.h2,{id:"content-and-credit",children:"Content and Credit"}),"\n",(0,r.jsxs)(n.p,{children:["The content of each data manipulation is based on the awesome ",(0,r.jsx)(n.a,{href:"https://kevinheavey.github.io/modern-polars/",children:"Modern Polars"})," book by ",(0,r.jsx)(n.a,{href:"https://github.com/kevinheavey",children:"Kevin Heavey"}),". And furthermore its origin is ",(0,r.jsx)(n.a,{href:"https://tomaugspurger.github.io/posts/modern-1-intro/",children:"Modern Pandas"})," by ",(0,r.jsx)(n.a,{href:"https://github.com/TomAugspurger",children:"Tom Augsburger"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["Each query is side-by-side with that of the original ",(0,r.jsx)(n.a,{href:"https://pola-rs.github.io/polars/py-polars/html/reference/",children:"Python Polars"})," one and the equivalent operations in PRQL, DuckDB SQL, and ",(0,r.jsx)(n.a,{href:"https://dplyr.tidyverse.org/",children:"dplyr"})," (R)."]}),"\n",(0,r.jsx)(n.p,{children:"Since this document focuses on the differences between the grammars of the different languages and does not go into detail about the processing details, I suggest that you also check out the original excellent artcles and book."}),"\n","\n","\n",(0,r.jsx)(o,{}),"\n",(0,r.jsx)(n.h2,{id:"running-the-code-on-ipython",children:"Running the Code on IPython"}),"\n",(0,r.jsx)(n.p,{children:"As mentioned above, PRQL and DuckDB can run on a variety of languages. This section describes, as an example, the use of IPython for easy interactive execution of PRQL, SQL, and Polars."}),"\n",(0,r.jsx)(n.h3,{id:"setup",children:"Setup"}),"\n",(0,r.jsx)(n.p,{children:"This command installs the necessary Python packages."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",metastring:'showLineNumbers title="Terminal"',children:"python -m pip install pyprql polars[pyarrow]\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Then, we can start ",(0,r.jsx)(n.code,{children:"ipython"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["Run ",(0,r.jsx)(n.code,{children:"load_ext"})," magic to activate PRQL magic (from ",(0,r.jsx)(n.a,{href:"https://pyprql.readthedocs.io/",children:"pyprql"}),") and SQL magic (from ",(0,r.jsx)(n.a,{href:"https://jupysql.ploomber.io/",children:"jupysql"}),")."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",metastring:"showLineNumbers",children:"%load_ext pyprql.magic\n%load_ext sql\n"})}),"\n",(0,r.jsx)(n.p,{children:"Use SQL magic connects to DuckDB in-memory database. Note that PRQL magic shares the connection with SQL magic."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",metastring:"showLineNumbers",children:"%sql duckdb://\n"})}),"\n",(0,r.jsxs)(n.p,{children:["To fix the SQL dialect used inside PRQL magic, we need to set the target with config magic. By setting ",(0,r.jsx)(n.code,{children:'"sql.duckdb"'})," here, we can specify to the PRQL compiler that it should generate optimized SQL for DuckDB."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",metastring:"showLineNumbers",children:'%config PrqlMagic.target = "sql.duckdb"\n'})}),"\n",(0,r.jsxs)(n.p,{children:["All available targets can be found in the ",(0,r.jsx)(n.code,{children:"prql_python.get_targets"})," function."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",metastring:"showLineNumbers",children:"import prql_python as prql\n\nprint(prql.get_targets())\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-text",children:"['sql.any', 'sql.ansi', 'sql.bigquery', 'sql.clickhouse', 'sql.duckdb', 'sql.generic', 'sql.glaredb', 'sql.mssql', 'sql.mysql', 'sql.postgres', 'sql.sqlite', 'sql.snowflake']\n"})}),"\n",(0,r.jsx)(n.h3,{id:"combine-duckdb-and-polars",children:"Combine DuckDB and Polars"}),"\n",(0,r.jsxs)(n.p,{children:["By setting ",(0,r.jsx)(n.code,{children:"autopolars"})," config, the results of PRQL and SQL executions can be converted to polars.DataFrame."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",metastring:"showLineNumbers",children:"%config PrqlMagic.autopolars = True\n%config SqlMagic.autopolars = True\n"})}),"\n",(0,r.jsx)(n.p,{children:"Also, since DuckDB can execute queries against polars.DataFrame and polars.LazyFrame etc., these can be referenced directly from PRQL or SQL, as shown below."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",metastring:"showLineNumbers",children:'import polars as pl\n\nlf = pl.LazyFrame({"a": list(range(1, 6))})\n'})}),"\n",(0,r.jsxs)(a.Z,{children:[(0,r.jsxs)(i.Z,{value:"PRQL DuckDB",children:[(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",metastring:"showLineNumbers",children:"%%prql\nfrom lf\nderive b = a * 5\ntake 3\n"})}),(0,r.jsx)("div",{dangerouslySetInnerHTML:{__html:p[0]}}),(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"a"}),(0,r.jsx)(n.th,{children:"b"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"i64"}),(0,r.jsx)(n.td,{children:"i64"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"1"}),(0,r.jsx)(n.td,{children:"5"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"2"}),(0,r.jsx)(n.td,{children:"10"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"3"}),(0,r.jsx)(n.td,{children:"15"})]})]})]}),(0,r.jsx)("div",{dangerouslySetInnerHTML:{__html:p[1]}})]}),(0,r.jsxs)(i.Z,{value:"SQL DuckDB",children:[(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",metastring:"showLineNumbers",children:"%%sql\nSELECT\n  a,\n  a * 5 AS b\nFROM lf\nLIMIT 3\n"})}),(0,r.jsx)("div",{dangerouslySetInnerHTML:{__html:p[2]}}),(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"a"}),(0,r.jsx)(n.th,{children:"b"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"i64"}),(0,r.jsx)(n.td,{children:"i64"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"1"}),(0,r.jsx)(n.td,{children:"5"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"2"}),(0,r.jsx)(n.td,{children:"10"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"3"}),(0,r.jsx)(n.td,{children:"15"})]})]})]}),(0,r.jsx)("div",{dangerouslySetInnerHTML:{__html:p[3]}})]}),(0,r.jsxs)(i.Z,{value:"Python Polars",children:[(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",metastring:"showLineNumbers",children:'lf.with_columns(b=pl.col("a") * 5).head(3).collect()\n'})}),(0,r.jsx)("div",{dangerouslySetInnerHTML:{__html:p[4]}}),(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"a"}),(0,r.jsx)(n.th,{children:"b"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"i64"}),(0,r.jsx)(n.td,{children:"i64"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"1"}),(0,r.jsx)(n.td,{children:"5"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"2"}),(0,r.jsx)(n.td,{children:"10"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"3"}),(0,r.jsx)(n.td,{children:"15"})]})]})]}),(0,r.jsx)("div",{dangerouslySetInnerHTML:{__html:p[5]}})]})]}),"\n",(0,r.jsx)(n.h2,{id:"license",children:"License"}),"\n",(0,r.jsx)(n.p,{children:"This website\u2019s content is licensed under the MIT license."})]})}function g(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(x,{...e})}):x(e)}},5162:(e,n,t)=>{t.d(n,{Z:()=>i});t(7294);var r=t(6905);const s={tabItem:"tabItem_Ymn6"};var a=t(5893);function i(e){let{children:n,hidden:t,className:i}=e;return(0,a.jsx)("div",{role:"tabpanel",className:(0,r.Z)(s.tabItem,i),hidden:t,children:n})}},4866:(e,n,t)=>{t.d(n,{Z:()=>w});var r=t(7294),s=t(6905),a=t(2466),i=t(6550),l=t(469),o=t(1980),c=t(7392),d=t(12);function h(e){return r.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function u(e){const{values:n,children:t}=e;return(0,r.useMemo)((()=>{const e=n??function(e){return h(e).map((e=>{let{props:{value:n,label:t,attributes:r,default:s}}=e;return{value:n,label:t,attributes:r,default:s}}))}(t);return function(e){const n=(0,c.l)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,t])}function p(e){let{value:n,tabValues:t}=e;return t.some((e=>e.value===n))}function m(e){let{queryString:n=!1,groupId:t}=e;const s=(0,i.k6)(),a=function(e){let{queryString:n=!1,groupId:t}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:n,groupId:t});return[(0,o._X)(a),(0,r.useCallback)((e=>{if(!a)return;const n=new URLSearchParams(s.location.search);n.set(a,e),s.replace({...s.location,search:n.toString()})}),[a,s])]}function x(e){const{defaultValue:n,queryString:t=!1,groupId:s}=e,a=u(e),[i,o]=(0,r.useState)((()=>function(e){let{defaultValue:n,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!p({value:n,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const r=t.find((e=>e.default))??t[0];if(!r)throw new Error("Unexpected error: 0 tabValues");return r.value}({defaultValue:n,tabValues:a}))),[c,h]=m({queryString:t,groupId:s}),[x,g]=function(e){let{groupId:n}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(n),[s,a]=(0,d.Nk)(t);return[s,(0,r.useCallback)((e=>{t&&a.set(e)}),[t,a])]}({groupId:s}),j=(()=>{const e=c??x;return p({value:e,tabValues:a})?e:null})();(0,l.Z)((()=>{j&&o(j)}),[j]);return{selectedValue:i,selectValue:(0,r.useCallback)((e=>{if(!p({value:e,tabValues:a}))throw new Error(`Can't select invalid tab value=${e}`);o(e),h(e),g(e)}),[h,g,a]),tabValues:a}}var g=t(2389);const j={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var b=t(5893);function f(e){let{className:n,block:t,selectedValue:r,selectValue:i,tabValues:l}=e;const o=[],{blockElementScrollPositionUntilNextRender:c}=(0,a.o5)(),d=e=>{const n=e.currentTarget,t=o.indexOf(n),s=l[t].value;s!==r&&(c(n),i(s))},h=e=>{let n=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const t=o.indexOf(e.currentTarget)+1;n=o[t]??o[0];break}case"ArrowLeft":{const t=o.indexOf(e.currentTarget)-1;n=o[t]??o[o.length-1];break}}n?.focus()};return(0,b.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,s.Z)("tabs",{"tabs--block":t},n),children:l.map((e=>{let{value:n,label:t,attributes:a}=e;return(0,b.jsx)("li",{role:"tab",tabIndex:r===n?0:-1,"aria-selected":r===n,ref:e=>o.push(e),onKeyDown:h,onClick:d,...a,className:(0,s.Z)("tabs__item",j.tabItem,a?.className,{"tabs__item--active":r===n}),children:t??n},n)}))})}function y(e){let{lazy:n,children:t,selectedValue:s}=e;const a=(Array.isArray(t)?t:[t]).filter(Boolean);if(n){const e=a.find((e=>e.props.value===s));return e?(0,r.cloneElement)(e,{className:"margin-top--md"}):null}return(0,b.jsx)("div",{className:"margin-top--md",children:a.map(((e,n)=>(0,r.cloneElement)(e,{key:n,hidden:e.props.value!==s})))})}function v(e){const n=x(e);return(0,b.jsxs)("div",{className:(0,s.Z)("tabs-container",j.tabList),children:[(0,b.jsx)(f,{...e,...n}),(0,b.jsx)(y,{...e,...n})]})}function w(e){const n=(0,g.Z)();return(0,b.jsx)(v,{...e,children:h(e.children)},String(n))}},1151:(e,n,t)=>{t.d(n,{Z:()=>l,a:()=>i});var r=t(7294);const s={},a=r.createContext(s);function i(e){const n=r.useContext(a);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),r.createElement(a.Provider,{value:n},e.children)}}}]);