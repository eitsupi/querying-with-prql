"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[206],{173:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>h,contentTitle:()=>c,default:()=>b,frontMatter:()=>d,metadata:()=>u,quartoRawHtml:()=>p,toc:()=>m});var a=n(5893),r=n(1151),s=n(4866),l=n(5162);function o(e){const t={admonition:"admonition",li:"li",p:"p",ul:"ul",...(0,r.a)(),...e.components};return(0,a.jsxs)(t.admonition,{type:"important",children:[(0,a.jsx)(t.p,{children:"The versions we are currently using are as follows:"}),(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsx)(t.li,{children:"PRQL: 0.11.2"}),"\n",(0,a.jsx)(t.li,{children:"DuckDB: v1.0.0"}),"\n"]})]})}function i(e={}){const{wrapper:t}={...(0,r.a)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(o,{...e})}):o(e)}const d={title:"Introduction",jupyter:"python3",sidebar_position:1,slug:"/"},c=void 0,u={id:"intro",title:"Introduction",description:"This document is an attempt to do some typical table data manipulation using PRQL and DuckDB.",source:"@site/docs/intro.mdx",sourceDirName:".",slug:"/",permalink:"/querying-with-prql/",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{title:"Introduction",jupyter:"python3",sidebar_position:1,slug:"/"},sidebar:"tutorialSidebar",next:{title:"Selecting and Filtering",permalink:"/querying-with-prql/indexing"}},h={},p=["<div><style>\n.dataframe > thead > tr,\n.dataframe > tbody > tr {\n  text-align: right;\n  white-space: pre-wrap;\n}\n</style>\n<small>shape: (3, 2)</small>",'\n<table class="dataframe" data-quarto-postprocess="true" data-border="1">\n<thead>\n<tr class="header">\n<th data-quarto-table-cell-role="th">a</th>\n<th data-quarto-table-cell-role="th">b</th>\n</tr>\n<tr class="odd">\n<th>i64</th>\n<th>i64</th>\n</tr>\n</thead>\n<tbody>\n<tr class="odd">\n<td>1</td>\n<td>5</td>\n</tr>\n<tr class="even">\n<td>2</td>\n<td>10</td>\n</tr>\n<tr class="odd">\n<td>3</td>\n<td>15</td>\n</tr>\n</tbody>\n</table>\n',"</div>","<div><style>\n.dataframe > thead > tr,\n.dataframe > tbody > tr {\n  text-align: right;\n  white-space: pre-wrap;\n}\n</style>\n<small>shape: (3, 2)</small>",'\n<table class="dataframe" data-quarto-postprocess="true" data-border="1">\n<thead>\n<tr class="header">\n<th data-quarto-table-cell-role="th">a</th>\n<th data-quarto-table-cell-role="th">b</th>\n</tr>\n<tr class="odd">\n<th>i64</th>\n<th>i64</th>\n</tr>\n</thead>\n<tbody>\n<tr class="odd">\n<td>1</td>\n<td>5</td>\n</tr>\n<tr class="even">\n<td>2</td>\n<td>10</td>\n</tr>\n<tr class="odd">\n<td>3</td>\n<td>15</td>\n</tr>\n</tbody>\n</table>\n',"</div>","<div><style>\n.dataframe > thead > tr,\n.dataframe > tbody > tr {\n  text-align: right;\n  white-space: pre-wrap;\n}\n</style>\n<small>shape: (3, 2)</small>",'\n<table class="dataframe" data-quarto-postprocess="true" data-border="1">\n<thead>\n<tr class="header">\n<th data-quarto-table-cell-role="th">a</th>\n<th data-quarto-table-cell-role="th">b</th>\n</tr>\n<tr class="odd">\n<th>i64</th>\n<th>i64</th>\n</tr>\n</thead>\n<tbody>\n<tr class="odd">\n<td>1</td>\n<td>5</td>\n</tr>\n<tr class="even">\n<td>2</td>\n<td>10</td>\n</tr>\n<tr class="odd">\n<td>3</td>\n<td>15</td>\n</tr>\n</tbody>\n</table>\n',"</div>"],m=[{value:"Motivation",id:"motivation",level:2},{value:"Content and Credit",id:"content-and-credit",level:2},{value:"Running the Code on IPython",id:"running-the-code-on-ipython",level:2},{value:"Setup",id:"setup",level:3},{value:"Combine DuckDB and Polars",id:"combine-duckdb-and-polars",level:3},{value:"License",id:"license",level:2}];function g(e){const t={a:"a",code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,r.a)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(t.p,{children:["This document is an attempt to do some typical table data manipulation using ",(0,a.jsx)(t.a,{href:"https://prql-lang.org/",children:"PRQL"})," and ",(0,a.jsx)(t.a,{href:"https://duckdb.org/",children:"DuckDB"}),"."]}),"\n",(0,a.jsxs)(t.p,{children:["PRQL is a in development modern language for data manipulation, and can be compiled to SQL. DuckDB is a modern in-memory SQL OLAP (",(0,a.jsx)(t.a,{href:"https://duckdblabs.github.io/db-benchmark/",children:"very fast"}),") database management system."]}),"\n",(0,a.jsx)(t.h2,{id:"motivation",children:"Motivation"}),"\n",(0,a.jsx)(t.p,{children:"CLI, JavaScript, Python, R, etc., we can combine PRQL compiler and DuckDB in various places to manipulate data with PRQL."}),"\n",(0,a.jsx)(t.p,{children:"At the same time, new features are being added to DuckDB\u2019s SQL on a constant basis, and the syntax is becoming more friendly."}),"\n",(0,a.jsx)(t.p,{children:"So, I thought that by comparing PRQL and the latest DuckDB SQL (and other query libraries), we could clarify the missing features of the PRQL and highlight the latest features of DuckDB."}),"\n",(0,a.jsx)(t.h2,{id:"content-and-credit",children:"Content and Credit"}),"\n",(0,a.jsxs)(t.p,{children:["The content of each data manipulation is based on the awesome ",(0,a.jsx)(t.a,{href:"https://kevinheavey.github.io/modern-polars/",children:"Modern Polars"})," book by ",(0,a.jsx)(t.a,{href:"https://github.com/kevinheavey",children:"Kevin Heavey"}),". And furthermore its origin is ",(0,a.jsx)(t.a,{href:"https://tomaugspurger.github.io/posts/modern-1-intro/",children:"Modern Pandas"})," by ",(0,a.jsx)(t.a,{href:"https://github.com/TomAugspurger",children:"Tom Augsburger"}),"."]}),"\n",(0,a.jsxs)(t.p,{children:["Each query is side-by-side with that of the original ",(0,a.jsx)(t.a,{href:"https://pola-rs.github.io/polars/py-polars/html/reference/",children:"Python Polars"})," one and the equivalent operations in PRQL, DuckDB SQL, and ",(0,a.jsx)(t.a,{href:"https://dplyr.tidyverse.org/",children:"dplyr"})," (R)."]}),"\n",(0,a.jsx)(t.p,{children:"Since this document focuses on the differences between the grammars of the different languages and does not go into detail about the processing details, I suggest that you also check out the original excellent artcles and book."}),"\n","\n",(0,a.jsx)(i,{}),"\n",(0,a.jsx)(t.h2,{id:"running-the-code-on-ipython",children:"Running the Code on IPython"}),"\n",(0,a.jsx)(t.p,{children:"As mentioned above, PRQL and DuckDB can run on a variety of languages. This section describes, as an example, the use of IPython for easy interactive execution of PRQL, SQL, and Polars."}),"\n",(0,a.jsx)(t.h3,{id:"setup",children:"Setup"}),"\n",(0,a.jsx)(t.p,{children:"This command installs the necessary Python packages."}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-bash",metastring:'showLineNumbers title="Terminal"',children:"python -m pip install pyprql polars[pyarrow]\n"})}),"\n",(0,a.jsxs)(t.p,{children:["Then, we can start ",(0,a.jsx)(t.code,{children:"ipython"}),"."]}),"\n",(0,a.jsxs)(t.p,{children:["Run ",(0,a.jsx)(t.code,{children:"load_ext"})," magic to activate PRQL magic (from ",(0,a.jsx)(t.a,{href:"https://pyprql.readthedocs.io/",children:"pyprql"}),") and SQL magic (from ",(0,a.jsx)(t.a,{href:"https://jupysql.ploomber.io/",children:"jupysql"}),")."]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-python",metastring:'showLineNumbers title="IPython"',children:"%load_ext pyprql.magic\n%load_ext sql\n"})}),"\n",(0,a.jsx)(t.p,{children:"Use SQL magic connects to DuckDB in-memory database. Note that PRQL magic shares the connection with SQL magic."}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-python",metastring:'showLineNumbers title="IPython"',children:"%sql duckdb://\n"})}),"\n",(0,a.jsxs)(t.p,{children:["To fix the SQL dialect used inside PRQL magic, we need to set the target with config magic. By setting ",(0,a.jsx)(t.code,{children:'"sql.duckdb"'})," here, we can specify to the PRQL compiler that it should generate optimized SQL for DuckDB."]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-python",metastring:'showLineNumbers title="IPython"',children:'%config PrqlMagic.target = "sql.duckdb"\n'})}),"\n",(0,a.jsxs)(t.p,{children:["All available targets can be found in the ",(0,a.jsx)(t.code,{children:"prqlc.get_targets"})," function."]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-python",metastring:'showLineNumbers title="IPython"',children:"import prqlc\n\nprint(prqlc.get_targets())\n"})}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-text",children:"['sql.any', 'sql.ansi', 'sql.bigquery', 'sql.clickhouse', 'sql.duckdb', 'sql.generic', 'sql.glaredb', 'sql.mssql', 'sql.mysql', 'sql.postgres', 'sql.sqlite', 'sql.snowflake']\n"})}),"\n",(0,a.jsx)(t.h3,{id:"combine-duckdb-and-polars",children:"Combine DuckDB and Polars"}),"\n",(0,a.jsxs)(t.p,{children:["By setting ",(0,a.jsx)(t.code,{children:"autopolars"})," config, the results of PRQL and SQL executions can be converted to polars.DataFrame."]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-python",metastring:'showLineNumbers title="IPython"',children:"%config PrqlMagic.autopolars = True\n%config SqlMagic.autopolars = True\n"})}),"\n",(0,a.jsx)(t.p,{children:"Also, since DuckDB can execute queries against polars.DataFrame and polars.LazyFrame etc., these can be referenced directly from PRQL or SQL, as shown below."}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-python",metastring:'showLineNumbers title="IPython"',children:'import polars as pl\n\nlf = pl.LazyFrame({"a": list(range(1, 6))})\n'})}),"\n",(0,a.jsxs)(s.Z,{children:[(0,a.jsxs)(l.Z,{value:"PRQL DuckDB",children:[(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-python",metastring:'showLineNumbers title="IPython"',children:"%%prql\nfrom lf\nderive b = a * 5\ntake 3\n"})}),(0,a.jsx)("div",{dangerouslySetInnerHTML:{__html:p[0]}}),(0,a.jsx)("div",{dangerouslySetInnerHTML:{__html:p[1]}}),(0,a.jsx)("div",{dangerouslySetInnerHTML:{__html:p[2]}})]}),(0,a.jsxs)(l.Z,{value:"SQL DuckDB",children:[(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-python",metastring:'showLineNumbers title="IPython"',children:"%%sql\nSELECT\n  a,\n  a * 5 AS b\nFROM lf\nLIMIT 3\n"})}),(0,a.jsx)("div",{dangerouslySetInnerHTML:{__html:p[3]}}),(0,a.jsx)("div",{dangerouslySetInnerHTML:{__html:p[4]}}),(0,a.jsx)("div",{dangerouslySetInnerHTML:{__html:p[5]}})]}),(0,a.jsxs)(l.Z,{value:"Python Polars",children:[(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-python",metastring:'showLineNumbers title="IPython"',children:'lf.with_columns(b=pl.col("a") * 5).head(3).collect()\n'})}),(0,a.jsx)("div",{dangerouslySetInnerHTML:{__html:p[6]}}),(0,a.jsx)("div",{dangerouslySetInnerHTML:{__html:p[7]}}),(0,a.jsx)("div",{dangerouslySetInnerHTML:{__html:p[8]}})]})]}),"\n",(0,a.jsx)(t.h2,{id:"license",children:"License"}),"\n",(0,a.jsx)(t.p,{children:"This website\u2019s content is licensed under the MIT license."})]})}function b(e={}){const{wrapper:t}={...(0,r.a)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(g,{...e})}):g(e)}},5162:(e,t,n)=>{n.d(t,{Z:()=>l});n(7294);var a=n(512);const r={tabItem:"tabItem_Ymn6"};var s=n(5893);function l(e){let{children:t,hidden:n,className:l}=e;return(0,s.jsx)("div",{role:"tabpanel",className:(0,a.Z)(r.tabItem,l),hidden:n,children:t})}},4866:(e,t,n)=>{n.d(t,{Z:()=>q});var a=n(7294),r=n(512),s=n(2466),l=n(6550),o=n(469),i=n(1980),d=n(7392),c=n(812);function u(e){return a.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,a.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function h(e){const{values:t,children:n}=e;return(0,a.useMemo)((()=>{const e=t??function(e){return u(e).map((e=>{let{props:{value:t,label:n,attributes:a,default:r}}=e;return{value:t,label:n,attributes:a,default:r}}))}(n);return function(e){const t=(0,d.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function p(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function m(e){let{queryString:t=!1,groupId:n}=e;const r=(0,l.k6)(),s=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,i._X)(s),(0,a.useCallback)((e=>{if(!s)return;const t=new URLSearchParams(r.location.search);t.set(s,e),r.replace({...r.location,search:t.toString()})}),[s,r])]}function g(e){const{defaultValue:t,queryString:n=!1,groupId:r}=e,s=h(e),[l,i]=(0,a.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!p({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const a=n.find((e=>e.default))??n[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:t,tabValues:s}))),[d,u]=m({queryString:n,groupId:r}),[g,b]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[r,s]=(0,c.Nk)(n);return[r,(0,a.useCallback)((e=>{n&&s.set(e)}),[n,s])]}({groupId:r}),f=(()=>{const e=d??g;return p({value:e,tabValues:s})?e:null})();(0,o.Z)((()=>{f&&i(f)}),[f]);return{selectedValue:l,selectValue:(0,a.useCallback)((e=>{if(!p({value:e,tabValues:s}))throw new Error(`Can't select invalid tab value=${e}`);i(e),u(e),b(e)}),[u,b,s]),tabValues:s}}var b=n(2389);const f={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var y=n(5893);function x(e){let{className:t,block:n,selectedValue:a,selectValue:l,tabValues:o}=e;const i=[],{blockElementScrollPositionUntilNextRender:d}=(0,s.o5)(),c=e=>{const t=e.currentTarget,n=i.indexOf(t),r=o[n].value;r!==a&&(d(t),l(r))},u=e=>{let t=null;switch(e.key){case"Enter":c(e);break;case"ArrowRight":{const n=i.indexOf(e.currentTarget)+1;t=i[n]??i[0];break}case"ArrowLeft":{const n=i.indexOf(e.currentTarget)-1;t=i[n]??i[i.length-1];break}}t?.focus()};return(0,y.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.Z)("tabs",{"tabs--block":n},t),children:o.map((e=>{let{value:t,label:n,attributes:s}=e;return(0,y.jsx)("li",{role:"tab",tabIndex:a===t?0:-1,"aria-selected":a===t,ref:e=>i.push(e),onKeyDown:u,onClick:c,...s,className:(0,r.Z)("tabs__item",f.tabItem,s?.className,{"tabs__item--active":a===t}),children:n??t},t)}))})}function v(e){let{lazy:t,children:n,selectedValue:r}=e;const s=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=s.find((e=>e.props.value===r));return e?(0,a.cloneElement)(e,{className:"margin-top--md"}):null}return(0,y.jsx)("div",{className:"margin-top--md",children:s.map(((e,t)=>(0,a.cloneElement)(e,{key:t,hidden:e.props.value!==r})))})}function j(e){const t=g(e);return(0,y.jsxs)("div",{className:(0,r.Z)("tabs-container",f.tabList),children:[(0,y.jsx)(x,{...t,...e}),(0,y.jsx)(v,{...t,...e})]})}function q(e){const t=(0,b.Z)();return(0,y.jsx)(j,{...e,children:u(e.children)},String(t))}},1151:(e,t,n)=>{n.d(t,{Z:()=>o,a:()=>l});var a=n(7294);const r={},s=a.createContext(r);function l(e){const t=a.useContext(s);return a.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),a.createElement(s.Provider,{value:t},e.children)}}}]);