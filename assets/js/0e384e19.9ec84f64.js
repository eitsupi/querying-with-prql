"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[671],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>h});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),u=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=u(e.components);return a.createElement(s.Provider,{value:t},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,s=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),c=u(n),d=r,h=c["".concat(s,".").concat(d)]||c[d]||m[d]||l;return n?a.createElement(h,o(o({ref:t},p),{},{components:n})):a.createElement(h,o({ref:t},p))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,o=new Array(l);o[0]=d;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[c]="string"==typeof e?e:r,o[1]=i;for(var u=2;u<l;u++)o[u]=n[u];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},5162:(e,t,n)=>{n.d(t,{Z:()=>o});var a=n(7294),r=n(6010);const l={tabItem:"tabItem_Ymn6"};function o(e){let{children:t,hidden:n,className:o}=e;return a.createElement("div",{role:"tabpanel",className:(0,r.Z)(l.tabItem,o),hidden:n},t)}},4866:(e,t,n)=>{n.d(t,{Z:()=>v});var a=n(7462),r=n(7294),l=n(6010),o=n(2466),i=n(6550),s=n(1980),u=n(7392),p=n(12);function c(e){return function(e){return r.Children.map(e,(e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:t,label:n,attributes:a,default:r}}=e;return{value:t,label:n,attributes:a,default:r}}))}function m(e){const{values:t,children:n}=e;return(0,r.useMemo)((()=>{const e=t??c(n);return function(e){const t=(0,u.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function d(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function h(e){let{queryString:t=!1,groupId:n}=e;const a=(0,i.k6)(),l=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,s._X)(l),(0,r.useCallback)((e=>{if(!l)return;const t=new URLSearchParams(a.location.search);t.set(l,e),a.replace({...a.location,search:t.toString()})}),[l,a])]}function g(e){const{defaultValue:t,queryString:n=!1,groupId:a}=e,l=m(e),[o,i]=(0,r.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!d({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const a=n.find((e=>e.default))??n[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:t,tabValues:l}))),[s,u]=h({queryString:n,groupId:a}),[c,g]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[a,l]=(0,p.Nk)(n);return[a,(0,r.useCallback)((e=>{n&&l.set(e)}),[n,l])]}({groupId:a}),b=(()=>{const e=s??c;return d({value:e,tabValues:l})?e:null})();(0,r.useLayoutEffect)((()=>{b&&i(b)}),[b]);return{selectedValue:o,selectValue:(0,r.useCallback)((e=>{if(!d({value:e,tabValues:l}))throw new Error(`Can't select invalid tab value=${e}`);i(e),u(e),g(e)}),[u,g,l]),tabValues:l}}var b=n(2389);const k={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function y(e){let{className:t,block:n,selectedValue:i,selectValue:s,tabValues:u}=e;const p=[],{blockElementScrollPositionUntilNextRender:c}=(0,o.o5)(),m=e=>{const t=e.currentTarget,n=p.indexOf(t),a=u[n].value;a!==i&&(c(t),s(a))},d=e=>{let t=null;switch(e.key){case"Enter":m(e);break;case"ArrowRight":{const n=p.indexOf(e.currentTarget)+1;t=p[n]??p[0];break}case"ArrowLeft":{const n=p.indexOf(e.currentTarget)-1;t=p[n]??p[p.length-1];break}}t?.focus()};return r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.Z)("tabs",{"tabs--block":n},t)},u.map((e=>{let{value:t,label:n,attributes:o}=e;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:i===t?0:-1,"aria-selected":i===t,key:t,ref:e=>p.push(e),onKeyDown:d,onClick:m},o,{className:(0,l.Z)("tabs__item",k.tabItem,o?.className,{"tabs__item--active":i===t})}),n??t)})))}function f(e){let{lazy:t,children:n,selectedValue:a}=e;const l=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=l.find((e=>e.props.value===a));return e?(0,r.cloneElement)(e,{className:"margin-top--md"}):null}return r.createElement("div",{className:"margin-top--md"},l.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==a}))))}function N(e){const t=g(e);return r.createElement("div",{className:(0,l.Z)("tabs-container",k.tabList)},r.createElement(y,(0,a.Z)({},e,t)),r.createElement(f,(0,a.Z)({},e,t)))}function v(e){const t=(0,b.Z)();return r.createElement(N,(0,a.Z)({key:String(t)},e))}},9746:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>c,default:()=>y,frontMatter:()=>p,metadata:()=>m,quartoRawHtml:()=>h,toc:()=>g});var a=n(7462),r=(n(7294),n(3905)),l=n(4866),o=n(5162);const i={toc:[]},s="wrapper";function u(e){let{components:t,...n}=e;return(0,r.kt)(s,(0,a.Z)({},i,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("admonition",{type:"important"},(0,r.kt)("p",{parentName:"admonition"},"The versions we are currently using are as follows:"),(0,r.kt)("ul",{parentName:"admonition"},(0,r.kt)("li",{parentName:"ul"},"PRQL: 0.9.2"),(0,r.kt)("li",{parentName:"ul"},"DuckDB: 0.8.1"))))}u.isMDXComponent=!0;const p={title:"Introduction",jupyter:"python3",sidebar_position:1,slug:"/"},c=void 0,m={unversionedId:"intro",id:"intro",title:"Introduction",description:"This document is an attempt to do some typical table data manipulation",source:"@site/docs/intro.md",sourceDirName:".",slug:"/",permalink:"/querying-with-prql/",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{title:"Introduction",jupyter:"python3",sidebar_position:1,slug:"/"},sidebar:"tutorialSidebar",next:{title:"Selecting and Filtering",permalink:"/querying-with-prql/indexing"}},d={},h=["<div><style>\n.dataframe > thead > tr > th,\n.dataframe > tbody > tr > td {\n  text-align: right;\n}\n</style>\n<small>shape: (3, 2)</small>","</div>","<div><style>\n.dataframe > thead > tr > th,\n.dataframe > tbody > tr > td {\n  text-align: right;\n}\n</style>\n<small>shape: (3, 2)</small>","</div>","<div><style>\n.dataframe > thead > tr > th,\n.dataframe > tbody > tr > td {\n  text-align: right;\n}\n</style>\n<small>shape: (3, 2)</small>","</div>"],g=[{value:"Motivation",id:"motivation",level:2},{value:"Content and Credit",id:"content-and-credit",level:2},{value:"Running the Code on IPython",id:"running-the-code-on-ipython",level:2},{value:"Setup",id:"setup",level:3},{value:"Combine DuckDB and Polars",id:"combine-duckdb-and-polars",level:3},{value:"License",id:"license",level:2}],b={quartoRawHtml:h,toc:g},k="wrapper";function y(e){let{components:t,...n}=e;return(0,r.kt)(k,(0,a.Z)({},b,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"This document is an attempt to do some typical table data manipulation\nusing ",(0,r.kt)("a",{parentName:"p",href:"https://prql-lang.org/"},"PRQL")," and ",(0,r.kt)("a",{parentName:"p",href:"https://duckdb.org/"},"DuckDB"),"."),(0,r.kt)("p",null,"PRQL is a in development modern language for data manipulation, and can\nbe compiled to SQL. DuckDB is a modern in-memory SQL OLAP (",(0,r.kt)("a",{parentName:"p",href:"https://duckdblabs.github.io/db-benchmark/"},"very\nfast"),") database management\nsystem."),(0,r.kt)("h2",{id:"motivation"},"Motivation"),(0,r.kt)("p",null,"CLI, JavaScript, Python, R, etc., we can combine PRQL compiler and\nDuckDB in various places to manipulate data with PRQL."),(0,r.kt)("p",null,"At the same time, new features are being added to DuckDB\u2019s SQL on a\nconstant basis, and the syntax is becoming more friendly."),(0,r.kt)("p",null,"So, I thought that by comparing PRQL and the latest DuckDB SQL (and\nother query libraries), we could clarify the missing features of the\nPRQL and highlight the latest features of DuckDB."),(0,r.kt)("h2",{id:"content-and-credit"},"Content and Credit"),(0,r.kt)("p",null,"The content of each data manipulation is based on the awesome ",(0,r.kt)("a",{parentName:"p",href:"https://kevinheavey.github.io/modern-polars/"},"Modern\nPolars")," book by ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/kevinheavey"},"Kevin\nHeavey"),". And furthermore its origin is\n",(0,r.kt)("a",{parentName:"p",href:"https://tomaugspurger.github.io/posts/modern-1-intro/"},"Modern Pandas"),"\nby ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/TomAugspurger"},"Tom Augsburger"),"."),(0,r.kt)("p",null,"Each query is side-by-side with that of the original ",(0,r.kt)("a",{parentName:"p",href:"https://pola-rs.github.io/polars/py-polars/html/reference/"},"Python\nPolars")," one\nand the equivalent operations in PRQL, DuckDB SQL, and\n",(0,r.kt)("a",{parentName:"p",href:"https://dplyr.tidyverse.org/"},"dplyr")," (R)."),(0,r.kt)("p",null,"Since this document focuses on the differences between the grammars of\nthe different languages and does not go into detail about the processing\ndetails, I suggest that you also check out the original excellent\nartcles and book."),(0,r.kt)(u,{mdxType:"VesionInfo"}),(0,r.kt)("h2",{id:"running-the-code-on-ipython"},"Running the Code on IPython"),(0,r.kt)("p",null,"As mentioned above, PRQL and DuckDB can run on a variety of languages.\nThis section describes, as an example, the use of IPython for easy\ninteractive execution of PRQL, SQL, and Polars."),(0,r.kt)("h3",{id:"setup"},"Setup"),(0,r.kt)("p",null,"This command installs the necessary Python packages."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash",metastring:'showLineNumbers title="Terminal"',showLineNumbers:!0,title:'"Terminal"'},"python -m pip install pyprql polars[pyarrow]\n")),(0,r.kt)("p",null,"Then, we can start ",(0,r.kt)("inlineCode",{parentName:"p"},"ipython"),"."),(0,r.kt)("p",null,"Run ",(0,r.kt)("inlineCode",{parentName:"p"},"load_ext")," magic to activate PRQL magic (from\n",(0,r.kt)("a",{parentName:"p",href:"https://pyprql.readthedocs.io/"},"pyprql"),") and SQL magic (from\n",(0,r.kt)("a",{parentName:"p",href:"https://jupysql.ploomber.io/"},"jupysql"),")."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python",metastring:"showLineNumbers",showLineNumbers:!0},"%load_ext pyprql.magic\n%load_ext sql\n")),(0,r.kt)("p",null,"Use SQL magic connects to DuckDB in-memory database. Note that PRQL\nmagic shares the connection with SQL magic."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python",metastring:"showLineNumbers",showLineNumbers:!0},"%sql duckdb://\n")),(0,r.kt)("p",null,"To fix the SQL dialect used inside PRQL magic, we need to set the target\nwith config magic. By setting ",(0,r.kt)("inlineCode",{parentName:"p"},'"sql.duckdb"')," here, we can specify to the\nPRQL compiler that it should generate optimized SQL for DuckDB."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python",metastring:"showLineNumbers",showLineNumbers:!0},'%config PrqlMagic.target = "sql.duckdb"\n')),(0,r.kt)("p",null,"All available targets can be found in the ",(0,r.kt)("inlineCode",{parentName:"p"},"prql_python.get_targets"),"\nfunction."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python",metastring:"showLineNumbers",showLineNumbers:!0},"import prql_python as prql\n\nprint(prql.get_targets())\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"['sql.any', 'sql.ansi', 'sql.bigquery', 'sql.clickhouse', 'sql.duckdb', 'sql.generic', 'sql.mssql', 'sql.mysql', 'sql.postgres', 'sql.sqlite', 'sql.snowflake']\n")),(0,r.kt)("h3",{id:"combine-duckdb-and-polars"},"Combine DuckDB and Polars"),(0,r.kt)("p",null,"By setting ",(0,r.kt)("inlineCode",{parentName:"p"},"autopolars")," config, the results of PRQL and SQL executions\ncan be converted to polars.DataFrame."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python",metastring:"showLineNumbers",showLineNumbers:!0},"%config PrqlMagic.autopolars = True\n%config SqlMagic.autopolars = True\n")),(0,r.kt)("p",null,"Also, since DuckDB can execute queries against polars.DataFrame and\npolars.LazyFrame etc., these can be referenced directly from PRQL or\nSQL, as shown below."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python",metastring:"showLineNumbers",showLineNumbers:!0},'import polars as pl\n\nlf = pl.LazyFrame({"a": list(range(1, 6))})\n')),(0,r.kt)(l.Z,{mdxType:"Tabs"},(0,r.kt)(o.Z,{value:"PRQL DuckDB",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python",metastring:"showLineNumbers",showLineNumbers:!0},"%%prql\nfrom lf\nderive b = a * 5\ntake 3\n")),(0,r.kt)("div",{dangerouslySetInnerHTML:{__html:h[0]}}),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"a"),(0,r.kt)("th",{parentName:"tr",align:null},"b"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"i64"),(0,r.kt)("td",{parentName:"tr",align:null},"i64")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"1"),(0,r.kt)("td",{parentName:"tr",align:null},"5")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"2"),(0,r.kt)("td",{parentName:"tr",align:null},"10")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"3"),(0,r.kt)("td",{parentName:"tr",align:null},"15")))),(0,r.kt)("div",{dangerouslySetInnerHTML:{__html:h[1]}})),(0,r.kt)(o.Z,{value:"SQL DuckDB",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python",metastring:"showLineNumbers",showLineNumbers:!0},"%%sql\nSELECT\n  a,\n  a * 5 AS b\nFROM lf\nLIMIT 3\n")),(0,r.kt)("div",{dangerouslySetInnerHTML:{__html:h[2]}}),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"a"),(0,r.kt)("th",{parentName:"tr",align:null},"b"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"i64"),(0,r.kt)("td",{parentName:"tr",align:null},"i64")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"1"),(0,r.kt)("td",{parentName:"tr",align:null},"5")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"2"),(0,r.kt)("td",{parentName:"tr",align:null},"10")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"3"),(0,r.kt)("td",{parentName:"tr",align:null},"15")))),(0,r.kt)("div",{dangerouslySetInnerHTML:{__html:h[3]}})),(0,r.kt)(o.Z,{value:"Python Polars",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python",metastring:"showLineNumbers",showLineNumbers:!0},'lf.with_columns(b=pl.col("a") * 5).head(3).collect()\n')),(0,r.kt)("div",{dangerouslySetInnerHTML:{__html:h[4]}}),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"a"),(0,r.kt)("th",{parentName:"tr",align:null},"b"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"i64"),(0,r.kt)("td",{parentName:"tr",align:null},"i64")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"1"),(0,r.kt)("td",{parentName:"tr",align:null},"5")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"2"),(0,r.kt)("td",{parentName:"tr",align:null},"10")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"3"),(0,r.kt)("td",{parentName:"tr",align:null},"15")))),(0,r.kt)("div",{dangerouslySetInnerHTML:{__html:h[5]}}))),(0,r.kt)("h2",{id:"license"},"License"),(0,r.kt)("p",null,"This website\u2019s content is licensed under the MIT license."))}y.isMDXComponent=!0}}]);